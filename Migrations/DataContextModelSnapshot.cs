// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodTruckRodeo.API.Migrations
{
  [DbContext(typeof(DataContext))]
  partial class DataContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "3.1.6");

      modelBuilder.Entity("Models.CalendarEvent", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("Address")
                      .HasColumnType("TEXT");

            b.Property<string>("Address2")
                      .HasColumnType("TEXT");

            b.Property<string>("City")
                      .HasColumnType("TEXT");

            b.Property<DateTime>("Date")
                      .HasColumnType("TEXT");

            b.Property<DateTime>("EndTime")
                      .HasColumnType("TEXT");

            b.Property<int>("FoodTruckId")
                      .HasColumnType("INTEGER");

            b.Property<string>("Location")
                      .HasColumnType("TEXT");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.Property<DateTime>("StartTime")
                      .HasColumnType("TEXT");

            b.Property<string>("State")
                      .HasColumnType("TEXT");

            b.Property<string>("ZipCode")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("FoodTruckId");

            b.ToTable("CalendarEvents");
          });

      modelBuilder.Entity("Models.Cart", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<int>("FoodTruckUserId")
                      .HasColumnType("INTEGER");

            b.Property<bool>("IsOrderFilled")
                      .HasColumnType("INTEGER");

            b.Property<bool>("IsPurchaseComplete")
                      .HasColumnType("INTEGER");

            b.Property<float>("SubTotal")
                      .HasColumnType("REAL");

            b.Property<float>("Tax")
                      .HasColumnType("REAL");

            b.Property<float>("Total")
                      .HasColumnType("REAL");

            b.HasKey("Id");

            b.HasIndex("FoodTruckUserId");

            b.ToTable("Carts");
          });

      modelBuilder.Entity("Models.CartItemDetail", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<int?>("CartId")
                      .HasColumnType("INTEGER");

            b.Property<int>("ItemId")
                      .HasColumnType("INTEGER");

            b.Property<int>("Quantity")
                      .HasColumnType("INTEGER");

            b.HasKey("Id");

            b.HasIndex("CartId");

            b.ToTable("CartItemDetails");
          });

      modelBuilder.Entity("Models.ContactRequest", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("Email")
                      .HasColumnType("TEXT");

            b.Property<int>("FoodTruckId")
                      .HasColumnType("INTEGER");

            b.Property<string>("Message")
                      .HasColumnType("TEXT");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("FoodTruckId");

            b.ToTable("ContactRequests");
          });

      modelBuilder.Entity("Models.FoodTruck", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("Description")
                      .HasColumnType("TEXT");

            b.Property<string>("Email")
                      .HasColumnType("TEXT");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.Property<string>("Phone")
                      .HasColumnType("TEXT");

            b.Property<string>("Tagline")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.ToTable("FoodTrucks");
          });

      modelBuilder.Entity("Models.FoodTruckUser", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<int>("FoodTruckId")
                      .HasColumnType("INTEGER");

            b.Property<bool>("IsAdmin")
                      .HasColumnType("INTEGER");

            b.Property<int>("UserId")
                      .HasColumnType("INTEGER");

            b.HasKey("Id");

            b.HasIndex("FoodTruckId");

            b.HasIndex("UserId");

            b.ToTable("FoodTruckUsers");
          });

      modelBuilder.Entity("Models.Item", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("Description")
                      .HasColumnType("TEXT");

            b.Property<bool>("IsSoldOut")
                      .HasColumnType("INTEGER");

            b.Property<int>("MenuId")
                      .HasColumnType("INTEGER");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.Property<float>("Price")
                      .HasColumnType("REAL");

            b.Property<string>("Size")
                      .HasColumnType("TEXT");

            b.Property<int>("SortOrder")
                      .HasColumnType("INTEGER");
                      
            b.HasKey("Id");

            b.HasIndex("MenuId");

            b.ToTable("Items");
          });

      modelBuilder.Entity("Models.Menu", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<int>("FoodTruckId")
                      .HasColumnType("INTEGER");

            b.Property<bool>("IsActive")
                      .HasColumnType("INTEGER");

            b.Property<bool>("SortOrder")
                      .HasColumnType("INTEGER");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("FoodTruckId");

            b.ToTable("Menus");
          });

      modelBuilder.Entity("Models.User", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("Email")
                      .HasColumnType("TEXT");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.Property<byte[]>("PasswordHash")
                      .HasColumnType("BLOB");

            b.Property<byte[]>("PasswordSalt")
                      .HasColumnType("BLOB");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("TEXT");

            b.Property<string>("Username")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.ToTable("Users");
          });

      modelBuilder.Entity("Models.Value", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("Name")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.ToTable("Values");
          });

      modelBuilder.Entity("Models.CalendarEvent", b =>
          {
            b.HasOne("Models.FoodTruck", "FoodTruck")
                      .WithMany("CalendarEvents")
                      .HasForeignKey("FoodTruckId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Models.Cart", b =>
          {
            b.HasOne("Models.FoodTruckUser", "FoodTruckUser")
                      .WithMany("Carts")
                      .HasForeignKey("FoodTruckUserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Models.CartItemDetail", b =>
          {
            b.HasOne("Models.Cart", null)
                      .WithMany("CartItemDetails")
                      .HasForeignKey("CartId");
          });

      modelBuilder.Entity("Models.ContactRequest", b =>
          {
            b.HasOne("Models.FoodTruck", "FoodTruck")
                      .WithMany("ContactRequests")
                      .HasForeignKey("FoodTruckId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Models.FoodTruckUser", b =>
          {
            b.HasOne("Models.FoodTruck", "FoodTruck")
                      .WithMany("FoodTruckUsers")
                      .HasForeignKey("FoodTruckId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("Models.User", "User")
                      .WithMany("FoodTruckUsers")
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Models.Item", b =>
          {
            b.HasOne("Models.Menu", "Menu")
                      .WithMany("Items")
                      .HasForeignKey("MenuId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Models.Menu", b =>
          {
            b.HasOne("Models.FoodTruck", "FoodTruck")
                      .WithMany("Menus")
                      .HasForeignKey("FoodTruckId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });
#pragma warning restore 612, 618
    }
  }
}
